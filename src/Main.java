
import java.sql.Array;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sombras
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb_SQLServertables = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Ta_tablasReplicandose = new javax.swing.JTextArea();
        btn_limpiarSeleccion = new javax.swing.JButton();
        Btn_replicar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tb_SQLServertables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Tabla", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_SQLServertables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_SQLServertablesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tb_SQLServertablesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tb_SQLServertablesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tb_SQLServertables);

        jButton1.setText("Cargar la data");

        jButton2.setText("Cargar tablas SQL Server");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Ta_tablasReplicandose.setEditable(false);
        Ta_tablasReplicandose.setColumns(20);
        Ta_tablasReplicandose.setRows(5);
        jScrollPane2.setViewportView(Ta_tablasReplicandose);

        btn_limpiarSeleccion.setText("Limpiar ");
        btn_limpiarSeleccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limpiarSeleccionMouseClicked(evt);
            }
        });

        Btn_replicar.setText("Replicar");
        Btn_replicar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_replicarMouseClicked(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tablas a replicar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(173, 173, 173)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Btn_replicar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_limpiarSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(106, 106, 106))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jButton2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(Btn_replicar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(btn_limpiarSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(310, 310, 310))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Statement stmt;
        Object dataEntrante[] = new Object[3];
        String tb_nombre;
        int tb_id;
        this.limpiartabla1();
        DefaultTableModel tabla1 = (DefaultTableModel) this.tb_SQLServertables.getModel();
        try {
            stmt = conectSQL.createStatement();
            ResultSet rs = stmt.executeQuery("Select * from tb_infotablas");
            while (rs.next()) {
                tb_id = rs.getInt("tb_id");
                tb_nombre = rs.getString("tb_nombre");
                dataEntrante[0] = tb_id;
                dataEntrante[1] = tb_nombre;
                dataEntrante[2] = 0;
                tabla1.addRow(dataEntrante);
            }
        } catch (SQLException ex) {
            System.out.println(ex.toString());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated


    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.limpiartabla1();
    }//GEN-LAST:event_formWindowOpened

    private void tb_SQLServertablesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_SQLServertablesMousePressed
        this.tablaSeleccionada = Integer.parseInt(String.valueOf(this.tb_SQLServertables.getValueAt(this.tb_SQLServertables.getSelectedRow(), 0)));
        System.out.println(tablaSeleccionada);
    }//GEN-LAST:event_tb_SQLServertablesMousePressed

    private void tb_SQLServertablesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_SQLServertablesMouseReleased
        String TextoAnteriorArea = this.Ta_tablasReplicandose.getText();
        TextoAnteriorArea = TextoAnteriorArea.concat(this.tb_SQLServertables.getValueAt(this.tb_SQLServertables.getSelectedRow(), 1).toString().concat("\n"));
        this.Ta_tablasReplicandose.setText(TextoAnteriorArea);

        Statement stmt;
        try {
            //tablaSeleccionada++;
            stmt = conectSQL.createStatement();
            stmt.executeQuery("Update tb_infotablas set tb_replicando = 1 \n"
                    + "where tb_id = " + tablaSeleccionada);
        } catch (SQLException ex) {
            System.out.println(ex.toString());
        }


    }//GEN-LAST:event_tb_SQLServertablesMouseReleased

    private void tb_SQLServertablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_SQLServertablesMouseClicked
        this.tablaSeleccionada = this.tb_SQLServertables.getSelectedRow();
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_SQLServertablesMouseClicked

    private void btn_limpiarSeleccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limpiarSeleccionMouseClicked
        this.Ta_tablasReplicandose.setText("");
        Statement stmt;
        try {
            stmt = conectSQL.createStatement();
            stmt.executeQuery("Update tb_infotablas set tb_replicando = 0 \n"
                    + "where tb_replicando = 1");
        } catch (SQLException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btn_limpiarSeleccionMouseClicked

    private void Btn_replicarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_replicarMouseClicked
        ArrayList<String> listatablasReplicandose = new ArrayList<String>();
        String texto = this.Ta_tablasReplicandose.getText();
        String[] lineas = texto.split("\n");
        for (int i = 0; i < lineas.length; i++) {
            listatablasReplicandose.add(lineas[i]);
        }

        for (int i = 0; i < listatablasReplicandose.size(); i++) {
            System.out.println(listatablasReplicandose.get(i));
            RevisarBitacora(listatablasReplicandose.get(i));
        }
    }//GEN-LAST:event_Btn_replicarMouseClicked

    public static void RevisarBitacora(String nombreTabla) {
        Date Fecha_local;
        int Copied_local, oldValue_local, newValue_local, TableID_local;
        String ActionType_local;
        Statement stmt1, stmt2;

        try {
            stmt1 = conectSQL.createStatement();

            ResultSet rsSQL1 = stmt1.executeQuery("Select * from TB_Bitacora where TableID = (Select tb_id From tb_infotablas where tb_nombre = '" + nombreTabla + "')");
            while (rsSQL1.next()) {
                Fecha_local = rsSQL1.getDate("Fecha");
                Copied_local = rsSQL1.getInt("Copied");
                oldValue_local = rsSQL1.getInt("oldValue");
                newValue_local = rsSQL1.getInt("newValue");
                TableID_local = rsSQL1.getInt("TableID");
                ActionType_local = rsSQL1.getString("ActionType");

                ActualizarDatos(Fecha_local, Copied_local, oldValue_local, newValue_local, TableID_local, ActionType_local, nombreTabla);

                /*dataEntrante[0] = Fecha_local;
                dataEntrante[1] = Copied_local;
                dataEntrante[2] = oldValue_local;
                dataEntrante[3] = newValue_local;
                dataEntrante[4] = TableID_local;
                dataEntrante[5] = ActionType_local;*/
            }
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void ActualizarDatos(Date Fecha, int Copied, int oldValue, int newValue, int TableID, String ActionType, String nombreTabla) {
        Object dataEntrante[] = new Object[100];
        System.out.println(ActionType.toString());
        try {
            Statement stmt2 = connectMySQL.createStatement();
            Statement stmt1 = conectSQL.createStatement();
            Statement stmt3 = conectSQL.createStatement();

            if (Copied == 0 && (ActionType.equals("insert") || ActionType.equals("Update"))) {
                if (nombreTabla.equals("Region")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from dbo.Region where RegionID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("RegionID");
                        System.out.println(dataEntrante[0]);
                        dataEntrante[1] = rsSQL2.getString("RegionDescription");
                        System.out.println(dataEntrante[1]);
                        if (ActionType.equals("insert")) {
                            stmt2.executeUpdate("insert into region(RegionID,RegionDescription) values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "');");
                        } else if (ActionType.equals("Update")) {
                            stmt2.executeUpdate("Update region set RegionDescription='" + dataEntrante[1] + "' where RegionID= " + dataEntrante[0] + "  ");
                        }

                        //Le decimos a SQL que ese campo ya se ha copiado. 
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                    }

                } else if (nombreTabla.equals("CustomerDemographics")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from CustomerDemographics where CustomerTypeID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getString("CustomerTypeID");
                        System.out.println(dataEntrante[0]);
                        dataEntrante[1] = rsSQL2.getString("CustomerDesc");
                        System.out.println(dataEntrante[1]);
                        stmt2.executeUpdate("insert into customerdemographics(CustomerTypeID,CustomerDesc) values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "');");
                        //Le decimos a SQL que ese campo ya se ha copiado. 
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                    }

                } else if (nombreTabla.equals("Customers")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Customers where CustomerID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getString("CustomerID");
                        dataEntrante[1] = rsSQL2.getString("CompanyName");
                        dataEntrante[2] = rsSQL2.getString("ContactName");
                        dataEntrante[3] = rsSQL2.getString("ContactTittle");
                        dataEntrante[4] = rsSQL2.getString("Address");
                        dataEntrante[5] = rsSQL2.getString("City");
                        dataEntrante[6] = rsSQL2.getString("Region");
                        dataEntrante[7] = rsSQL2.getString("PostalCode");
                        dataEntrante[8] = rsSQL2.getString("Country");
                        dataEntrante[9] = rsSQL2.getString("Phone");
                        dataEntrante[10] = rsSQL2.getString("Fax");
                        stmt2.executeUpdate("insert into region(CustomerID,CompanyName,ContactName,ContactTittle,Address,City,Region,PostalCode,Country,Phone,Fax)"
                                + "values ('" + dataEntrante[0] + "','" + dataEntrante[1] + "','" + dataEntrante[2] + "','" + dataEntrante[3] + "','" + dataEntrante[4] + "'"
                                + ",'" + dataEntrante[5] + "','" + dataEntrante[6] + "','" + dataEntrante[7] + "','" + dataEntrante[8] + "','" + dataEntrante[9] + "','" + dataEntrante[10] + "');");
                        //Le decimos a SQL que ese campo ya se ha copiado. 
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                    }

                } else if (nombreTabla.equals("Employees")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Employees where EmployeeeID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("EmployeeID");
                        dataEntrante[1] = rsSQL2.getString("LastName");
                        dataEntrante[2] = rsSQL2.getString("FisrtName");
                        dataEntrante[3] = rsSQL2.getString("Tittle");
                        dataEntrante[4] = rsSQL2.getString("TitleOfCourtesy");
                        dataEntrante[5] = rsSQL2.getDate("BirthDate");
                        dataEntrante[6] = rsSQL2.getDate("HireDate");
                        dataEntrante[7] = rsSQL2.getString("Address");
                        dataEntrante[8] = rsSQL2.getString("City");
                        dataEntrante[9] = rsSQL2.getString("Region");
                        dataEntrante[10] = rsSQL2.getString("PostalCode");
                        dataEntrante[11] = rsSQL2.getString("Country");
                        dataEntrante[12] = rsSQL2.getString("HomePhone");
                        dataEntrante[13] = rsSQL2.getString("Extension");
                        dataEntrante[14] = rsSQL2.getString("Notes");
                        dataEntrante[15] = rsSQL2.getString("ReportsTo");
                        dataEntrante[16] = rsSQL2.getString("Region");
                        dataEntrante[17] = rsSQL2.getString("PhotoPath");
                        stmt2.executeUpdate("insert into employees(EmployeeID,LastName,FirstName,Tittle,Address,TittleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,Photopath)"
                                + "values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "','" + dataEntrante[2] + "','" + dataEntrante[3] + "','" + dataEntrante[4] + "'," + dataEntrante[5] + "," + dataEntrante[6] + ",'" + dataEntrante[7] + "',"
                                + "'" + dataEntrante[8] + "','" + dataEntrante[9] + "','" + dataEntrante[10] + "','" + dataEntrante[11] + "','" + dataEntrante[12] + "','" + dataEntrante[13] + "','" + dataEntrante[14] + "','" + dataEntrante[15] + "','" + dataEntrante[16] + "','" + dataEntrante[17] + "');");
                        //Le decimos a SQL que ese campo ya se ha copiado. 
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                    }

                } else if (nombreTabla.equals("OrderDetails")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from OrderDetails where OrderID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("OrderID");
                        dataEntrante[1] = rsSQL2.getInt("ProductID");
                        dataEntrante[2] = rsSQL2.getInt("UnitPrice");
                        dataEntrante[3] = rsSQL2.getInt("Quantity");
                        dataEntrante[4] = rsSQL2.getDouble("Discount");
                        stmt2.executeUpdate("insert into orderdetails (OrderID,ProductID,UnitPrice,Quantity,Discount)"
                                + "values(" + dataEntrante[0] + "," + dataEntrante[1] + "," + dataEntrante[2] + "," + dataEntrante[3] + "," + dataEntrante[4] + ");");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }

                } else if (nombreTabla.equals("Categories")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Categories where CategoriesID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("CategoriesID");
                        dataEntrante[1] = rsSQL2.getInt("CategoryName");
                        dataEntrante[2] = rsSQL2.getInt("Description");
                        stmt2.executeUpdate("insert into categories (CategoryID,CategoryName,Description) values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "','" + dataEntrante[2] + "')");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }
                } else if (nombreTabla.equals("CustomerCustomerDemo")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from CustomerCustomerDemo where CustomerID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getString("CustomerID");
                        dataEntrante[1] = rsSQL2.getString("CustomerTypeID");
                        stmt2.executeUpdate("insert into customercustomerdemo (CustomerID,CustomerTypeID) values ('" + dataEntrante[0] + "','" + dataEntrante[1] + "')");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }
                } else if (nombreTabla.equals("EmployeeTerritories")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from EmployeeTerritories where EmployeeID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("EmployeeID");
                        dataEntrante[1] = rsSQL2.getString("TerritoryID");
                        stmt2.executeUpdate("insert into employeeterritories (EmployeeID,TerritoryID) values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "')");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }
                } else if (nombreTabla.equals("Orders")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Orders where OrderID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("OrderID");
                        dataEntrante[1] = rsSQL2.getString("CustomerID");
                        dataEntrante[2] = rsSQL2.getInt("EmployeeID");
                        dataEntrante[3] = rsSQL2.getDate("OrderDate");
                        dataEntrante[4] = rsSQL2.getDate("RequiredDate");
                        dataEntrante[5] = rsSQL2.getDate("ShippedDate");
                        dataEntrante[6] = rsSQL2.getInt("ShipVia");
                        dataEntrante[7] = rsSQL2.getDouble("Freight");
                        dataEntrante[8] = rsSQL2.getString("ShipName");
                        dataEntrante[9] = rsSQL2.getString("ShipAddress");
                        dataEntrante[10] = rsSQL2.getString("ShipCity");
                        dataEntrante[11] = rsSQL2.getString("ShipRegion");
                        dataEntrante[12] = rsSQL2.getString("ShipPostalCode");
                        dataEntrante[13] = rsSQL2.getString("ShipCountry");
                        stmt2.executeUpdate("insert into orders (OrderID,CustomerID,EmployeeID,OrderDate,RequiredDate,ShipedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) "
                                + "values (" + dataEntrante[0] + ",'" + dataEntrante[1] + "'," + dataEntrante[2] + "," + dataEntrante[3] + "," + dataEntrante[4] + ","
                                + "" + dataEntrante[5] + "," + dataEntrante[5] + "," + dataEntrante[6] + "," + dataEntrante[7] + ",'" + dataEntrante[8] + "','" + dataEntrante[9] + "','" + dataEntrante[10] + "','"
                                + "" + dataEntrante[11] + "','" + dataEntrante[12] + "','" + dataEntrante[13] + "');");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }
                } else if (nombreTabla.equals("Territories")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Territories where territoryID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getString("TerritoryID");
                        dataEntrante[1] = rsSQL2.getString("TerritoryDescription");
                        dataEntrante[2] = rsSQL2.getInt("RegionID");
                        stmt2.executeUpdate("insert into territories (TerritoryID,TerritoryDescription,RegionID)values ('" + dataEntrante[0] + "','" + dataEntrante[1] + "'," + dataEntrante[2] + ")");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                    }
                } else if (nombreTabla.equals("Products")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Products where ProductID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("ProductID");
                        dataEntrante[1] = rsSQL2.getString("ProductName");
                        dataEntrante[2] = rsSQL2.getInt("SupplierID");
                        dataEntrante[3] = rsSQL2.getInt("CategoryID");
                        dataEntrante[4] = rsSQL2.getString("QuantityPerUnit");
                        dataEntrante[5] = rsSQL2.getDouble("UnitPrice");
                        dataEntrante[6] = rsSQL2.getInt("UnitsInStock");
                        dataEntrante[7] = rsSQL2.getInt("UnitsOnOrder");
                        dataEntrante[8] = rsSQL2.getInt("ReorderLevel");
                        dataEntrante[9] = rsSQL2.getInt("Discontinued");
                        stmt2.executeUpdate("insert into products(ProductID,ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLeel,Discontinued)"
                                + "values(" + dataEntrante[0] + ",'" + dataEntrante[1] + "'," + dataEntrante[2] + "," + dataEntrante[3] + ",'" + dataEntrante[4] + "'," + dataEntrante[5] + "," + dataEntrante[6] + "," + dataEntrante[7] + "," + dataEntrante[8] + "," + dataEntrante[9] + "  )");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }
                } else if (nombreTabla.equals("Shippers")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Shippers where ShipperID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("ShipperID");
                        dataEntrante[1] = rsSQL2.getString("CompanyName");
                        dataEntrante[2] = rsSQL2.getString("Phone");
                        stmt2.executeUpdate("insert into shippers (shipperID,CompanyName,Phone)Values(" + dataEntrante[0] + "'," + dataEntrante[1] + "'," + dataEntrante[2] + ")");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }

                } else if (nombreTabla.equals("Suppliers")) {
                    ResultSet rsSQL2 = stmt1.executeQuery("Select * from Suppliers where SupplierID =" + newValue);
                    while (rsSQL2.next()) {
                        dataEntrante[0] = rsSQL2.getInt("SupplierID");
                        dataEntrante[1] = rsSQL2.getString("CompanyName");
                        dataEntrante[2] = rsSQL2.getString("ContactTitle");
                        dataEntrante[3] = rsSQL2.getString("Address");
                        dataEntrante[4] = rsSQL2.getString("City");
                        dataEntrante[5] = rsSQL2.getString("Region");
                        dataEntrante[6] = rsSQL2.getString("PostalCode");
                        dataEntrante[7] = rsSQL2.getString("Country");
                        dataEntrante[8] = rsSQL2.getString("ShipName");
                        dataEntrante[9] = rsSQL2.getString("Phone");
                        dataEntrante[10] = rsSQL2.getString("Fax");
                        dataEntrante[11] = rsSQL2.getString("HomePage");
                        stmt2.executeUpdate("insert into suppliers(SupplierID,CompanyName,ContactTitle,Address,City,Region,PostalCode,Country,ShipName,Phone,Fax,HomePage)"
                                + "values(" + dataEntrante[0] + ",'" + dataEntrante[1] + "','" + dataEntrante[2] + "','" + dataEntrante[3] + "','" + dataEntrante[4] + "','" + dataEntrante[5] + "',"
                                + "'" + dataEntrante[6] + "','" + dataEntrante[7] + "','" + dataEntrante[8] + "','" + dataEntrante[9] + "','" + dataEntrante[10] + "','" + dataEntrante[11] + "'  )");
                        stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);

                    }

                }

            } else if (Copied == 0 && ActionType.equals("Deleted")) {
                if (nombreTabla.equals("Region")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE region DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM region where regionID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE region ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Categories")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE categories DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM categories where CategoriID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE categories ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("CustomerCustomerDemo")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE custoercustomerdemo DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM customercustomerdemo where CustomerID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE customercustomerdemo ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("CustomerDemographics")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE customerdemographics DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM customerdemographicsn where CutomerTypeID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE customerdemographics ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Customers")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE customers DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM customers where CutomerID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE customers ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Employees")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE employess DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM employees where EmployeeID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE employees ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("EmployeeTerritories")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE employessterritories DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM employessterritories where EmployeeID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE employessterritories ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("OrderDetails")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE orderdetails DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM orderdetails where OrderID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE orderdetails ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Orders")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE orderdetails DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM orderdetails where OrderID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE orderdetails ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Products")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE products DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM products where ProductID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE products ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Suppliers")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE suppliers DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM suppliers where SupplierID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE supliers ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Territories")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE territories DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM territories where TerritoryID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE territories ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                } else if (nombreTabla.equals("Shippers")) {
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=0;");
                    stmt2.executeUpdate("ALTER TABLE shippers DISABLE KEYS;");
                    stmt2.executeUpdate("DELETE FROM shippers where ShipperID =" + oldValue + ";");
                    stmt2.executeUpdate("ALTER TABLE shipers ENABLE KEYS;");
                    stmt2.executeUpdate("SET FOREIGN_KEY_CHECKS=1;");
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                }
            }
            /*else if (Copied == 0 && ActionType.equals("Update")) {
                ResultSet rsSQL2 = stmt1.executeQuery("Select * from Region where RegionID=" + newValue);
                while (rsSQL2.next()) {
                    System.out.println("aqui 3");
                    dataEntrante[0] = rsSQL2.getInt("RegionID");
                    dataEntrante[1] = rsSQL2.getString("RegionDescription");
                    stmt2.executeUpdate("UPDATE region SET RegionDescription = '" + dataEntrante[1] + "' where RegionID=" + newValue + ";");
                    //Le decimos a SQL que ese campo ya se ha copiado. 
                    stmt3.execute("Update TB_Bitacora set Copied = 1 where TableID =" + TableID);
                }
            }*/

        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main.ConectarseSQL();
                try {
                    Main.ConectarseMySQL();

                } catch (SQLException ex) {
                    Logger.getLogger(Main.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                new Main().setVisible(true);
            }
        });

    }

    public void limpiartabla1() {
        DefaultTableModel tabla1 = new DefaultTableModel();
        tabla1.addColumn("tb_id");
        tabla1.addColumn("tb_nombre");
        tabla1.addColumn("tb_replicando");
        this.tb_SQLServertables.setModel(tabla1);

    }

    public static void ConectarseSQL() {
        try {
            String connectionUrl = "jdbc:sqlserver://;database=Northwind;integratedSecurity=true;";
            conectSQL = (Connection) DriverManager.getConnection(connectionUrl);
            System.out.println("Conectado a SQL server");
        } catch (SQLException ex) {
            System.out.println("Error.");
        }

    }

    public static void ConectarseMySQL() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            System.out.println("Driver mySQL cargado");
            connectMySQL = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/northwind?useTimezone=true&serverTimezone=UTC", "root", "1234");
            System.out.println("Conectado a MySQL");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.toString());
        }
    }

    static Connection conectSQL, connectMySQL;
    static int tablaSeleccionada = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_replicar;
    private javax.swing.JTextArea Ta_tablasReplicandose;
    private javax.swing.JButton btn_limpiarSeleccion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tb_SQLServertables;
    // End of variables declaration//GEN-END:variables
}
